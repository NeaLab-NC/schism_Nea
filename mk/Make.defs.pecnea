################################################################################
# Parallel SCHISM Makefile
#
# User makes environment settings for particular OS / PLATFORM / COMPILER / MPI
# below as well as setting flags having to do with included algorithms (e.g. sediment)
# and the compiler configuration (debug, timing).
#
# The environment settings are based on the following options.
#
# Compiler name:
#   FCS: Serial compiler (for utilities)
#   FCP: Parallel compiler
#   FLD: Linker (in general same as parallel compiler)
#
# Compilation flags
#   FCSFLAGS: Flags for serial compilation
#   FCPFLAGS: Flags for parallel compilation (including all pre-processing flags)
#   FLDFLAGS: Flags for linker (e.g., -O2)
#
# Preprocessor flags:
#   DEBUG: Enable debugging code
#   ORDERED_SUM: Enable globally ordered sums & dot-products for bit reproducibility
#     of state quantities independent of number of processors (note: this can
#     significantly degrade performance);
#   INCLUDE_TIMING: Enable wallclock timing of code (note: this can have slight
#     effect on performance);
#   MPI_VERSION = 1 or 2: Version of MPI (try 2 first, if compile fails due to mpi
#     related errors then switch to version 1;
#
# Libraries (needed for parallel code)
#   MTSLIBS: Flags for linking ParMeTiS/MeTiS libaries
################################################################################

ENV = PECNEA

HOME_DIR = /scratch_vol2/jlefevre/ncofs_shared.v6.6/sorc
PETSC_ROOT = /scratch_vol2/jlefevre/ncofs_shared.v6.6/sorc
SCHISM_VERSION = schism_latest


################################################################################
# Alternate executable name if you do not want the default.
################################################################################
EXEC   := pschism_$(ENV)

################################################################################
# Environment
################################################################################

FCP = mpif90
FCS = ifort
FLD = $(FCP)
# MPI vserion (1 or 2)
PPFLAGS := $(PPFLAGS) -DMPIVERSION=2

NETCDFLIB = `nf-config --flibs`
NETCDFINC = `nf-config --fflags`
NETCDF_LDFLAGS = `nf-config --flibs`

#-CB is much slower to compile and run
#Pure MPI
#EXEC := $(EXEC)_CB
FCPFLAGS = $(PPFLAGS) -O2 -mcmodel=medium -assume byterecl -ipo -axCORE-AVX2 -xSSE4.2
FLDFLAGS = -O2 -mcmodel=medium -ipo -axCORE-AVX2 -xSSE4.2

# Jerome suggestion
FCPFLAGS = $(PPFLAGS) -g -O0 -axSSE4.2 -assume byterecl -mcmodel=medium -diag-disable 8291
FLDFLAGS =  -g -O0 -axSSE4.2 $(NETCDF_LDFLAGS)

FCPFLAGS = $(PPFLAGS) -O2 -axSSE4.2 -qno-openmp-simd -assume byterecl -mcmodel=medium -diag-disable 8291
FLDFLAGS = -O2 -axSSE4.2 -qno-openmp-simd $(NETCDF_LDFLAGS)

# DEBUG
#FCPFLAGS = $(PPFLAGS) -O0 -axSSE4.2 -qno-openmp-simd -assume byterecl -mcmodel=medium -diag-disable 8291
#FLDFLAGS = -O0 -axSSE4.2 -qno-openmp-simd $(NETCDF_LDFLAGS)

#####Libraries
CDFLIBS = $(NETCDF_LDFLAGS)
CDFMOD = $(NETCDFINC)


################################################################################
# Algorithm preference flags.
# Comment out unwanted modules and flags.
################################################################################

# -DSCHISM is always on and is defined elsewhere

include ../mk/include_modules

# Don't comment out the follow ifdef
ifdef USE_GOTM
   GTMMOD = -I${HOME_DIR}/${SCHISM_VERSION}/src/GOTM4.0/modules/PECNEA/
   GTMLIBS = -L${HOME_DIR}/${SCHISM_VERSION}/src/GOTM4.0/lib/PECNEA/ -lturbulence_prod  -lutil_prod
else
   GTMMOD =
   GTMLIBS =
endif


# PetSC
ifdef USE_PETSC
  #PETSC_DIR = ${PETSC_ROOT}/petsc-3.8.3
  PETSC_DIR=${PETSC_ROOT}/petsc-3.7.7
  #PETSC_DIR=${PETSC_ROOT}
  PETSC_ARCH=arch-linux2-c-debug
  #PETSC_ARCH=linux-gnu-c-debug
  #PETSC_LIB = ${PETSC_DIR}
  #PETSC_FC_INCLUDES = ${PETSC_DIR}
  #PETSC_INCLUDE=${PETSC_DIR}/lib/petsc/conf/variables
  #include ${PETSC_INCLUDE}
endif

######### Specialty compiler flags and workarounds
# Add -DNO_TR_15581 like below for allocatable array problem in sflux_subs.F90
# PPFLAGS := $(PPFLAGS) -DNO_TR_15581

# Obsolete flags: use USE_WRAP flag to avoid problems in ParMetis lib (calling C from FORTRAN)
# PPFLAGS := $(PPFLAGS) -DUSE_WRAP


